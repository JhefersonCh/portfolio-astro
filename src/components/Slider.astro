---
// src/components/Slider.astro

interface Props {
  images: { src: string; alt: string }[];
}

const { images } = Astro.props;
---

<div class="relative w-full rounded-lg shadow-md">
  <div
    id="slider-container"
    class="flex transition-transform duration-300 ease-in-out"
  >
    {
      images.map((img, index) => (
        <div class="min-w-full">
          <img src={img.src} alt={img.alt} class="min-w-full object-cover" />
        </div>
      ))
    }
  </div>

  <button
    type="button"
    class="absolute left-1 top-1/2 transform -translate-y-1/2 p-2 bg-gray-900 bg-opacity-50 text-white rounded-full hover:bg-opacity-75 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-800"
    onclick="slide('left')"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      ><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path
        d="M7 6v12"></path><path d="M18 6l-6 6l6 6"></path></svg
    >
  </button>
  <button
    type="button"
    class="absolute right-1 top-1/2 transform -translate-y-1/2 p-2 bg-gray-900 bg-opacity-50 text-white rounded-full hover:bg-opacity-75 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-800"
    onclick="slide('right')"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      ><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path
        d="M6 6l6 6l-6 6"></path><path d="M17 5v13"></path></svg
    >
  </button>
</div>

<script is:inline>
  (function init() {
    const container = document.getElementById('slider-container');
    const images = container.getElementsByTagName('img');
    let imagesLoaded = 0;

    function slide(direction) {
      if (!container) return;
      const buttons = document.querySelectorAll('button');
      buttons.forEach((button) => {
        button.disabled = true;
      });
      const scrollAmount =
        direction === 'left'
          ? -container.clientWidth + 1
          : direction === 'left-all'
            ? (-container.clientWidth + 1) * (images.length - 1)
            : container.clientWidth + 1;
      container.scrollBy({ left: scrollAmount, behavior: 'smooth' });
      setTimeout(() => {
        buttons.forEach((button) => {
          button.disabled = false;
        });
      }, 500);
    }

    function checkImagesLoaded() {
      imagesLoaded++;
      if (imagesLoaded === images.length) {
        window.slide = slide;
      }
    }

    for (let img of images) {
      if (img.complete) {
        checkImagesLoaded();
      } else {
        img.addEventListener('load', checkImagesLoaded);
        img.addEventListener('error', checkImagesLoaded);
      }
    }

    let currentIndex = 0;
    const interval = setInterval(() => {
      currentIndex = (currentIndex + 1) % images.length;
      if (currentIndex !== images.length - 1) {
        slide('right');
      } else {
        slide('left-all');
      }
    }, 3000);

    window.addEventListener('unload', () => clearInterval(interval));
  })();
</script>

<style>
  .scrollbar-none {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }

  #slider-container {
    overflow: hidden;
  }
</style>
